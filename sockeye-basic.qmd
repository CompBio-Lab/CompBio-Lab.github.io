---
engine: knitr
---
```{r, setup, include=FALSE}
#' Set current file codes to not be evaluated
knitr::opts_chunk$set(
  eval=FALSE
)
```
# Sockeye 

Sockeye is a High Performance Computing (HPC) platform, use it to run large computational analysis or works here.
Using this platform requires some knowledge to Linux system, also setup in your local computer. 

In the following sections, for simplicity, we will differentiate these platforms by the following:

- Your PC/Laptop = **Local**

- Sockeye = **Remote**

---

**Terminologies**

- Node: Computer
- Job: Complex computation task
- Walltime: Maximum time allowed to run a job (give $x + 1$ hours for safe)
- Resources: Memory/Time/Nodes/Cores use to run a job
- Batch job: Usage for non-interactive scripts scheduled to be run
- Interactive job: Usage for testing scripts that requires some amount of resources
- Directory: folder
- Access: Read or write permission from user
- I/O: Input and Output
- "X" Space
  - Home: your personal directory (private)
  - Scratch: directory to carry most computations 
  - Project: directory to store large files of any kind


:::{.callout-important}
Sockeye is a bit special in terms of write and read access from different nodes (more on this later). And, internet connection is not guaranteed everywhere.
:::


## Login

To login into the remote server of **Sockeye**, use the following code as template:
```{bash arc-login}
ssh cwl@arc.sockeye.ubc.ca
```

> Replace `cwl` with your actual campus-wide-login username

:::{.callout-tip}
Advanced usage is to configurate your `ssh` locally and setup a key to login into Sockeye without prompting password (2FA is still required). This complements with VSCode quite well
:::

### Setup SSH configuration for Sockeye (Optional)

Follow these steps depending on your OS (Windows/Linux/MacOs) to setup a proper SSH configuration for Sockeye server. Note, you could apply this same process to any other remote server of your choice:

1. Generate a new pair of ssh keys
2. Copy the **public** key from the generated pair to sockeye
3. Add `Host`, `HostName`, `User` into `~/.ssh/config` in your local (see below)

#### Windows Powershell
To generate a new `ssh` key:
```{bash gen-shh-win}
ssh-keygen -t rsa
```

To add your newly created ssh key (public) to server:
```{bash add-key-win, eval=FALSE}
type $env:USERPROFILE\.ssh\id_rsa.pub | ssh cwl@sockeye.arc.ubc.ca "cat >> .ssh/authorized_keys"
```

#### Linux

To generate a new `ssh` key:
```{bash gen-shh-linux}
ssh-keygen -t rsa
```

To add your newly created `ssh` key (public) to server:
```{bash add-key-linux}
ssh-copy-id -i ~/.ssh/id_rsa.pub cwl@sockeye.arc.ubc.ca
```

#### MacOS

To generate a new `ssh` key, remember to replace `cwl`:
```{bash gen-shh-mac}
ssh-keygen -t rsa
```

To add your newly created ssh key (public) to server:
```{bash add-key-mac}
cat ~/.ssh/id_rsa.pub | ssh cwl@sockeye.arc.ubc.ca 'cat >> /home/user/.ssh/authorized_keys'
```

:::{.callout-caution}
Careful with accidentally copying your private `id_*` key without the `.pub` extension to the server of your choice
:::


## Job Submission